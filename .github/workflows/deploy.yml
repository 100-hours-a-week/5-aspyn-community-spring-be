name: Deploy Backend to EC2

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 자동 실행

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # GitHub 저장소의 코드 가져오기
      - name: Checkout repository
        uses: actions/checkout@v3

      # GitHub Container Registry (GHCR) 로그인
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_OWNER }} --password-stdin

      # Docker 이미지 빌드 후 GHCR에 푸시
      - name: Build & Push Docker Image
        run: |
          # 최신 Docker 이미지 태그 설정
          IMAGE_NAME=ghcr.io/${{ secrets.GHCR_OWNER }}/chalcak-be-container:latest
          
          # Docker 이미지 빌드 (chalcak 폴더에서 실행)
          docker build -t $IMAGE_NAME ./chalcak

          # GHCR에 Docker 이미지 푸시
          docker push $IMAGE_NAME

  deploy:
    runs-on: self-hosted
    needs: build-and-push # build-and-push 작업이 완료된 후 실행

    steps:
      # GitHub Actions의 Secrets 값을 받아서 .env 파일로 저장
      - name: Create .env file on EC2
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> /home/ubuntu/chalcak/be/.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> /home/ubuntu/chalcak/be/.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> /home/ubuntu/chalcak/be/.env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> /home/ubuntu/chalcak/be/.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> /home/ubuntu/chalcak/be/.env
          
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> /home/ubuntu/chalcak/be/.env
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> /home/ubuntu/chalcak/be/.env
          echo "AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}" >> /home/ubuntu/chalcak/be/.env
          echo "CORS_ALLOWED_ORIGINS=${{ secrets.CORS_ALLOWED_ORIGINS }}" >> /home/ubuntu/chalcak/be/.env
        shell: bash

      # GHCR에서 최신 Docker 이미지를 가져옴
      - name: Pull latest Docker image
        run: docker pull ghcr.io/${{ secrets.GHCR_OWNER }}/chalcak-be-container:latest

      - name: Stop and remove old container
        run: |
          docker-compose -f /home/ubuntu/chalcak/be/docker-compose.yml down # 기존 컨테이너 중지
          docker rmi $(docker images -q ghcr.io/${{ secrets.GHCR_OWNER }}/chalcak-be-container) # 기존 이미지 삭제

      # 새로운 컨테이너 실행
      - name: Run new container
        run: docker-compose -f /home/ubuntu/chalcak/be/docker-compose.yml up -d